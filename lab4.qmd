---
title: "Week 5: Bayesian linear regression and introduction to Stan"
date: today
date-format: "11/02/2023"
format: pdf
execute: 
  warning: false
  message: false
---

# Introduction

Today we will be starting off using Stan, looking at the kid's test score data set (available in resources for the [Gelman Hill textbook](https://mc-stan.org/rstanarm/reference/rstanarm-datasets.html)). 

```{r}
library(tidyverse)
library(rstan)
library(tidybayes)
library(here)
```


The data look like this:

```{r}
kidiq <- read_rds("D:\\kidiq.RDS")
kidiq


```
As well as the kid's test scores, we have a binary variable indicating whether or not the mother completed high school, the mother's IQ and age. 


# Descriptives

## Question 1

Use plots or tables to show three interesting observations about the data. Remember:

- Explain what your graph/ tables show
- Choose a graph type that's appropriate to the data type  

```{r}
library(skimr)
library(janitor)
library(ggplot2)
skim(kidiq)
kidiq |>get_dupes()
kidiq1<-kidiq |> distinct()
summary(kidiq1$mom_age)
kidiq1 |> ggplot(aes(x=kid_score,fill=mom_hs, color=mom_hs)) +geom_histogram( position="identity") +theme_bw()+facet_grid(mom_hs ~ .)
kidiq1 |> ggplot()+geom_point(aes(x=mom_iq,y=kid_score))+theme_bw()
kidiq1 |> ggplot()+geom_point(aes(x=mom_age,y=kid_score))+theme_bw()


```

From the above 3 graphs, the mother who completed high schools education could have a  kid with a higher test score.The higher the mother's IQ, the higher her kids's test score. There are no any relationship between kid_score and their mother ages within 30-year-old.

A graph type that's appropriate to the data type  is mom_iq VS kid_score plot.

# Estimating mean, no covariates

In class we were trying to estimate the mean and standard deviation of the kid's test scores. The `kids2.stan` file contains a Stan model to do this. If you look at it, you will notice the first `data` chunk lists some inputs that we have to define: the outcome variable `y`, number of observations `N`, and the mean and standard deviation of the prior on `mu`. Let's define all these values in a `data` list.


```{r}
y <- kidiq1$kid_score
mu0 <- 80
sigma0 <- 10

# named list to input for stan function
data <- list(y = y, 
             N = length(y), 
             mu0 = mu0,
             sigma0 = sigma0)
```



Now we can run the model:

```{r}
library(tidyverse)
library(rstan)
library(tidybayes)
library(here)

fit <-rstan::stan(file =here::here("D:\\kids2.stan"),
            data = data,
            chains = 3,
            iter = 500)
```

Look at the summary

```{r}
fit
```

Traceplot

```{r}
traceplot(fit)
```

All looks fine. 

```{r}
library(tidyverse)
library(rstan)
library(tidybayes)
library(here)
pairs(fit, pars = c("mu", "sigma"))
```

```{r}
stan_dens(fit, separate_chains = TRUE)
```


## Understanding output

What does the model actually give us? A number of samples from the posteriors. To see this, we can use `extract` to get the samples. 

```{r}
post_samples <- extract(fit)
head(post_samples[["mu"]])
```


This is a list, and in this case, each element of the list has 4000 samples. E.g. quickly plot a histogram of mu

```{r}
hist(post_samples[["mu"]])
median(post_samples[["mu"]])
# 95% bayesian credible interval
quantile(post_samples[["mu"]], 0.025)
quantile(post_samples[["mu"]], 0.975)
```



## Plot estimates

There are a bunch of packages, built-in functions that let you plot the estimates from the model, and I encourage you to explore these options (particularly in `bayesplot`, which we will most likely be using later on). I like using the `tidybayes` package, which allows us to easily get the posterior samples in a tidy format (e.g. using gather draws to get in long format). Once we have that, it's easy to just pipe and do ggplots as usual. 


Get the posterior samples for mu and sigma in long format:

```{r}
dsamples <- fit  |> 
  gather_draws(mu, sigma) # gather = long format
dsamples

# wide format
fit  |>  spread_draws(mu, sigma)

# quickly calculate the quantiles using 

dsamples |> 
  median_qi(.width = 0.8)
```

Let's plot the density of the posterior samples for mu and add in the prior distribution

```{r}
dsamples |> 
  filter(.variable == "mu") |> 
  ggplot(aes(.value, color = "posterior")) + geom_density(size = 1) + 
  xlim(c(70, 100)) + 
  stat_function(fun = dnorm, 
        args = list(mean = mu0, 
                    sd = sigma0), 
        aes(colour = 'prior'), size = 1) +
  scale_color_manual(name = "", values = c("prior" = "red", "posterior" = "black")) + 
  ggtitle("Prior and posterior for mean test scores") + 
  xlab("score")
  
```

## Question 2

Change the prior to be much more informative (by changing the standard deviation to be 0.1). Rerun the model. Do the estimates change? Plot the prior and posterior densities.   

```{r}
mod1 <- rstan::stan(file = here::here("D:\\kids4.stan"),
            data = data,
            chains = 3,
            iter = 500)
summary(mod1)
```



mu did not change,but sigma totally were altered and became smaller.  


```{r}
mod1samples <- mod1  |> 
  gather_draws(mu, sigma) # gather = long format
mod1samples

# wide format
mod1  |>  spread_draws(mu, sigma)

# quickly calculate the quantiles using 

mod1samples |> 
  median_qi(.width = 0.8)  

mod1samples |> 
  filter(.variable == "mu") |> 
  ggplot(aes(.value, color = "posterior")) + geom_density(size = 1) + 
  xlim(c(60, 110)) + 
  stat_function(fun = dnorm, 
        args = list(mean = mu0, 
                    sd = sigma0), 
        aes(colour = 'prior'), size = 1) +
  scale_color_manual(name = "", values = c("prior" = "red", "posterior" = "black")) + 
  ggtitle("Prior and posterior for mean test scores") + xlab("score") + theme_bw()


```


# Adding covariates

Now let's see how kid's test scores are related to mother's education. We want to run the simple linear regression

$$
Score = \alpha + \beta X
$$
where $X = 1$ if the mother finished high school and zero otherwise. 

`kid3.stan` has the stan model to do this. Notice now we have some inputs related to the design matrix $X$ and the number of covariates (in this case, it's just 1).

Let's get the data we need and run the model. 



```{r}
X <- as.matrix(kidiq1$mom_hs, ncol = 1) # force this to be a matrix
K <- 1

data <- list(y = y, N = length(y), 
             X =X, K = K)
fit2 <- rstan::stan(file = here::here("D:\\kids3.stan"),
            data = data, 
            iter = 1000)
```

## Question 3

a) Confirm that the estimates of the intercept and slope are comparable to results from `lm()` 

```{r}
library(skimr)
library(janitor)

mod2<-lm(kid_score~mom_hs,data=kidiq1)  
summary(fit2)$summary[c("alpha", "beta[1]"),]
summary(mod2) 

```

Both are almost same.

b) Do a `pairs` plot to investigate the joint sample distributions of the slope and intercept. Comment briefly on what you see. Is this potentially a problem?

```{r}
library(tidyverse)
library(rstan)
library(tidybayes)
library(here)

pairs(fit2, pars = c("alpha", "beta"))  

```

In the fit2, its intercept(alpha) has a wide distribution which means a good sampling but a little hard to compute the intercept and beta(slope) has a narrower distribution which means a bad sampling but easily to compute the slope.Thus,this is potentially a problem. 

## Plotting results
===
It might be nice to plot the posterior samples of the estimates for the non-high-school and high-school mothered kids. Here's some code that does this: notice the `beta[condition]` syntax. Also notice I'm using `spread_draws`, because it's easier to calculate the estimated effects in wide format

```{r}
fit2 |>
  spread_draws(alpha, beta[k], sigma) |> 
     mutate(nhs = alpha, # no high school is just the intercept
          hs = alpha + beta) |> 
  select(nhs, hs) |> 
  pivot_longer(nhs:hs, names_to = "education", values_to = "estimated_score") |> 
  ggplot(aes(y = education, x = estimated_score)) +
  stat_halfeye() + 
  theme_bw() + 
  ggtitle("Posterior estimates of scores by education level of mother")
  
```


## Question 4

Add in mother's IQ as a covariate and rerun the model. Please  mean center the covariate before putting it into the model. Interpret the coefficient on the (centered) mum's IQ.  


```{r}
y <- kidiq1$kid_score
mu0 <- 80
sigma0 <- 10
# named list to input for stan function
data <- list(y = y, 
             N = length(y), 
             mu0 = mu0,
             sigma0 = sigma0)

X <-  cbind(as.matrix(kidiq1$mom_hs),as.matrix(kidiq1$mom_iq - mean(kidiq1$mom_iq))) # force this to be a matrix
K <- 2

data <- list(y = y, N = length(y), 
             X =X, K = K)
mod3 <- stan(file = here::here("D:\\kids3.stan"),
            data = data, 
            iter = 1000)
```

```{r}
summary(mod3)$summary[c("alpha", "beta[1]","beta[2]"),]
mean(kidiq1$kid_score)
```
Here the alpha(intercept) means that when the mom_iq was in the average of all mom_iqs, the kids'test score actually was what should be.It almost closes to the mean of kid_score.The intercept was changed from the non-centered data before.  

Here the beta[1] is an estimator that shows a positive relationship between the kids'test score and moms' education.It means that when the mom completed the high school education their kids'test score also increased 5.6837998 scores corresponding to the moms' education variation. 

Here the beta[2] is an estimator that shows a positive relationship between the kids'test score and moms' IQ.It means that when the moms' IQ changed in one unit and their kids'test score also altered 0.5656852 scores corresponding to the moms' IQ variation.   


## Question 5 

Confirm the results from Stan agree with `lm()`  


```{r}
library(tidyverse)
library(stringr)
library(dplyr)
library(janitor)

kidiq2<- kidiq1 |> mutate(mom_iq=mom_iq-mean(mom_iq))
kidiq3<-as.data.frame(kidiq2)

mod4<- lm(kid_score~mom_hs+mom_iq,data=kidiq3)  
summary(mod4)$coeff
```
The 3 estimators of both formulas are almost same.

## Question 6

Plot the posterior estimates of scores by education of mother for mothers who have an IQ of 110. 

```{r}
library(plyr)
library(dplyr)
library(tidyverse)

post_mod3_samples <- extract(mod3)
length(post_mod3_samples)
dim(post_mod3_samples[["beta"]])

x_new1 <- 110 

mod3 |>
  spread_draws(alpha, beta[k]) |> pivot_wider( names_from = "k", values_from = "beta")|>
  dplyr::rename(beta1="1",beta2="2")|>
     mutate(nhs = alpha+beta2*x_new1, # no high school is just the intercept
          hs = alpha + beta1+beta2*x_new1) |> 
  select(nhs, hs) |> 
  pivot_longer(nhs:hs, names_to = "education", values_to = "estimated_score") |> 
  #plyr::ddply("education", summarise, grp.mean=mean(estimated_score)) |>
  ggplot(aes(y = education, x = estimated_score)) +
  stat_halfeye()+
  theme_bw() + 
  ggtitle("Posterior estimates of scores by education level of mother")
  
```


## Question 7

Generate and plot (as a histogram) samples from the posterior predictive distribution for a new kid with a mother who graduated high school and has an IQ of 95.  

```{r}
library(ggplot2)
mod3_alpha <- post_mod3_samples[["alpha"]]
mod3_beta1 <- post_mod3_samples[["beta"]][,1] 
mod3_beta2 <- post_mod3_samples[["beta"]][,2]
x_new2 <-95
lin_mod3_pred <- mod3_alpha + mod3_beta1*1+mod3_beta2*x_new2
hist(lin_mod3_pred)
as.data.frame(lin_mod3_pred) |> ggplot(aes(x=lin_mod3_pred))+geom_histogram(color="black", fill="white")+ theme_bw() + ggtitle("Posterior estimates of scores by HS level mothers and IQ=95")+xlab("estimated_score")

```







===