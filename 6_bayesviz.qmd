---
title: "Week 6: Visualizing the Bayesian Workflow"
date: today
date-format: "DD/MM/YY"
format: pdf
#CXX14=$(BINPREF)g++ -O2 -march=native -mtune=native
execute: 
  warning: false
  message: false
---

# Introduction

This lab will be looking at trying to replicate some of the visualizations in the lecture notes, involving prior and posterior predictive checks, and LOO model comparisons. 

The dataset is a 0.1% of all births in the US in 2017. I've pulled out a few different variables, but as in the lecture, we'll just focus on birth weight and gestational age. 

# The data

Read it in, along with all our packages. 

```{r}

library(tidyverse)
library(here)
# for bayes stuff
library(rstan)
library(bayesplot) 
library(loo) 
library(tidybayes) 

ds <- readRDS("D:\\births_2017_sample.RDS")
head(ds)
ds
```

Brief overview of variables:

- `mager` mum's age
- `mracehisp` mum's race/ethnicity see here for codes: https://data.nber.org/natality/2017/natl2017.pdf page 15
- `meduc` mum's education see here for codes: https://data.nber.org/natality/2017/natl2017.pdf page 16
- `bmi` mum's bmi 
- `sex` baby's sex
- `combgest` gestational age in weeks
- `dbwt` birth weight in kg
- `ilive` alive at time of report y/n/ unsure

I'm going to rename some variables, remove any observations with missing gestational age or birth weight, restrict just to babies that were alive, and make a preterm variable. 

```{r}
ds1 <- ds %>% 
  rename(birthweight = dbwt, gest = combgest) %>% 
  mutate(preterm = ifelse(gest<32, "Y", "N")) %>% 
  filter(ilive=="Y",gest< 99, birthweight<9.999)
class(ds1$preterm)
```


## Question 1

Use plots or tables to show three interesting observations about the data. Remember:

- Explain what your graph/ tables show
- Choose a graph type that's appropriate to the data type
- If you use `geom_smooth`, please also plot the underlying data  

Feel free to replicate one of the scatter plots in the lectures as one of the interesting observations, as those form the basis of our models.  

```{r}
library(skimr)
library(janitor)
library(ggplot2)
skim(ds1)
ds1 |>get_dupes()
ds1<-ds1 |> distinct()
summary(ds1)
ds1|> ggplot(aes(x=birthweight,fill=meduc, color=meduc)) +geom_histogram( position="identity") +theme_bw()+facet_grid(meduc ~ .)
ds1 |> ggplot(aes(x = gest, y = birthweight, color = preterm, group = preterm))+geom_point()+theme_bw()+geom_smooth(method = "lm")+labs(title = "birthweight vs Gestational Age")
ds1 |> ggplot(aes(x=bmi,y=birthweight,color = preterm))+geom_point()+theme_bw()+geom_smooth(method = "gam")+labs(title = "MuM's BMI VS birthweight")


```

From above 3 plots,we could see that the higher education mum did not have more weight babies,their distributions of babies' weights were almost similar.  

The babies' weights hold a positive relationship with gestational age/time,especially before and after the preterm the both slopes should be different. The cutoff(30-32 weeks) for preterm is a bit arbitrary So there is a big uncertainty in the preterm slope line.

The mums' BMI(healthy state) did have no impact on their babies' weights.The BMI between 50-100 had an even distribution of birth weights.But the data was clearly non-reliable because the females with 100 BMI should not exist.  

I thought that The gest VS. birthweight was a graph type that's appropriate to the data type.


# The model

As in lecture, we will look at two candidate models 

Model 1 has log birth weight as a function of log gestational age

$$
\log(y_i) \sim N(\beta_1 + \beta_2\log(x_i), \sigma^2)
$$

Model 2 has an interaction term between gestation and prematurity

$$
\log(y_i) \sim N(\beta_1 + \beta_2\log(x_i) + \beta_3 z_i + \beta_4\log(x_i) z_i, \sigma^2)
$$

- $y_i$ is weight in kg
- $x_i$ is gestational age in weeks, CENTERED AND STANDARDIZED
- $z_i$ is preterm (0 or 1, if gestational age is less than 32 weeks)


# Prior predictive checks

Let's put some weakly informative priors on all parameters i.e. for the $\beta$s

$$
\beta \sim N(0, 1)
$$

and for $\sigma$

$$
\sigma \sim N^+(0,1)
$$
where the plus means positive values only i.e. Half Normal. 

Let's check to see what the resulting distribution of birth weights look like given Model 1 and the priors specified above, assuming we had no data on birth weight (but observations of gestational age).

## Question 2

For Model 1, simulate values of $\beta$s and $\sigma$ based on the priors above. Do 1000 simulations. Use these values to simulate (log) birth weights from the likelihood specified in Model 1, based on the set of observed gestational weights. **Remember the gestational weights should be centered and standardized**. 

- Plot the resulting distribution of simulated (log) birth weights. 
- Plot ten simulations of (log) birthweights against gestational age. 

```{r}
ds1$log_weight <- log(ds1$birthweight)
ds1$log_gest_c <- (log(ds1$gest) - mean(log(ds1$gest)))/sd(log(ds1$gest))
ds1 <- ds1 |> mutate(preterm=ifelse(gest<32, 1, 0))
class(ds1$preterm)

set.seed(1000)
n_sims <- 1000
sigma <- abs(rnorm(n_sims,0,1))
beta0 <- rnorm(n_sims,0,1)
beta1 <- rnorm(n_sims,0,1)

dsims <- tibble(log_gest_c = ds1$log_gest_c)

for (i in 1:n_sims) {
sims_mu <- beta0[i] + beta1[i] * dsims$log_gest_c
dsims[paste0(i)] <- rnorm(3842, mean = sims_mu, sd = sigma[i])
}
str(dsims)
 
sims_plot <- dsims |> select(-log_gest_c) |> pivot_longer(cols = everything())|> 
  ggplot(aes(x = value)) + geom_histogram(bins = 200) + theme_bw() + xlab("birthweight")+xlim(-20,20)
sims_plot

samp10 <- sample(ncol(dsims|>select(-log_gest_c)), 10)
a<-as.matrix(dsims[,samp10])
df<-as.data.frame(cbind(a,dsims$log_gest_c))

df|> ggplot()+ geom_point(aes(x=df[,11],y=df[,1]))+ geom_point(aes(x=df[,11],y=df[,2]))+geom_point(aes(x=df[,11],y=df[,3]))+geom_point(aes(x=df[,11],y=df[,4]))+geom_point(aes(x=df[,11],y=df[,5]))+geom_point(aes(x=df[,11],y=df[,6]))+geom_point(aes(x=df[,11],y=df[,7]))+geom_point(aes(x=df[,11],y=df[,8]))+geom_point(aes(x=df[,11],y=df[,9]))+geom_point(aes(x=df[,11],y=df[,10]))+theme_bw() +xlab("log centered standarized gestational age(weeks)")+ ylab("log birthweight")+labs(title="Model 1 ten groups of simulated data")




ddf<-df|> select(-V11)|>pivot_longer(cols = everything())
ddf<-cbind(names=rep(df$V11, each=10),ddf)
ddf|>
ggplot(aes(x=names,y=value))+geom_point()+theme_bw()+xlab("log centered standarized gestational age(weeks)")+ ylab("log birthweight")+labs(title="Model 1 ten groups of simulated data")
  
#samp10_plot<-ggplot()+geom_point(data=df,aes(x=df[,11],y=df[,1]))

#for(i in 2:10){samp10_plot<- samp10_plot+geom_point(data=df,aes(x=df[,11],y=df[,i]))}

#samp10_plot+theme_bw() +xlab("log centered standarized gestational age(weeks)")+ ylab(" log birthweight")




```
The distribution of ten groups of simulated data was so weird, its model seemed to be not so fittable.  


# Run the model

Now we're going to run Model 1 in Stan. The stan code is in the `code/models` folder. 

First, get our data into right form for input into stan. 

```{r}
ds1$log_weight <- log(ds1$birthweight)
ds1$log_gest_c <- (log(ds1$gest) - mean(log(ds1$gest)))/sd(log(ds1$gest))

# put into a list
stan_data <- list(N = nrow(ds1),
                  log_weight = ds1$log_weight,
                  log_gest = ds1$log_gest_c)
str(ds1)
```

Now fit the model

```{r}
mod1 <- rstan::stan(data = stan_data, 
             file = here::here("D:\\simple_weight.stan"),
             iter = 500,
             seed = 243)
```

```{r}
summary(mod1)$summary[c("beta[1]", "beta[2]", "sigma"),]
```


## Question 3

based on Model 1, give an estimate of the expected birthweight of a baby who was born at a gestational age of 37 weeks.  
```{r}
mean(log(ds1$gest))
exp(mean(log(ds1$gest)))
sd(log(ds1$gest))

```



log_weight= beta[1] + beta[2] * log_gest_c =1.1624783+0.1437529*(log(37)-3.650894)/0.06723322=1.077005   

the log birth weight range within(1.077005-0.1690330,1.077005+0.1690330)=(0.907972,1.246038)

An estimate of the expected birthweight of a baby who was born at a gestational age of 37 weeks was 2.935873 kg and its range (95%CI) within  
 
 (2.479289kg,3.476542kg).  
 
 The next part is my coding to compute the expected birthweight of a baby:  
 
 
```{r}
library(tidyverse)
library(rstan)
library(bayesplot) 
library(tidybayes)

mod1|> spread_draws(beta[k])|>
  mutate(expect_weight_EST=exp(beta[1]+beta[2]*(log(37)-mean(log(ds1$gest)))/sd(log(ds1$gest))))|>
  median_qi(expect_weight_EST)

cat("an estimate of the expected birthweight of a baby who was born \
    at a gestational age of 37 weeks =\n ",round(exp(1.060765),3),"kg", "\n")
```
 
An estimate of the expected birthweight of a baby who was born  
at a gestational age of 37 weeks =  2.889 kg.
 
 
## Question 4

Write a stan model to run Model 2, and run it.  

```{r}

# put into a list
stan_data1 <- list(N = nrow(ds1),
                  log_weight = ds1$log_weight,
                  log_gest = ds1$log_gest_c,
                  preterm=ds1$preterm)
mod3 <- rstan::stan(data = stan_data1, 
             file = here::here("D:\\simple_weight1.stan"),
             iter = 500,
             seed=243) 

summary(mod3)$summary[c("beta[1]", "beta[2]", "beta[3]", "beta[4]","sigma"),]
```


## Question 5

For reference I have uploaded some model 2 results. Check your results are similar. 

```{r}
load(here::here("D:\\mod2.Rda"))
summary(mod2)$summary[c(paste0("beta[", 1:4, "]"), "sigma"),]
```

Both results are similar, just beta[2]and beta[3] exchange order because prof. arranged the formula coefficients order which was different from mine.


# PPCs

Now we've run two candidate models let's do some posterior predictive checks. The `bayesplot` package has a lot of inbuilt graphing functions to do this. For example, let's plot the distribution of our data (y) against 100 different datasets drawn from the posterior predictive distribution:

```{r}
set.seed(100)
y <- ds1$log_weight
yrep1 <- extract(mod1)[["log_weight_rep"]]
yrep2 <- extract(mod3)[["log_weight_rep"]]
samp100 <- sample(nrow(yrep1), 100)
ppc_dens_overlay(y, yrep1[samp100, ])  + ggtitle("distribution of observed versus predicted birthweights")
```

## Question 6

Make a similar plot to the one above but for model 2, and **not** using the bayes plot in built function (i.e. do it yourself just with `geom_density`)  

The following plot was amde with build-in function of the bayes plot:  

```{r}
set.seed(100)
y <- ds1$log_weight
yrep2 <- extract(mod3)[["log_weight_rep"]]
samp100_1 <- sample(nrow(yrep2), 100)
ppc_dens_overlay(y, yrep2[samp100_1, ])  + ggtitle("Model 2 distribution of observed versus predicted birthweights")

```


The following figure was plotted by myself just with "geom_density":  


```{r}
library(tidyverse)
library(ggplot2)

samp100_2 <- sample(nrow(yrep2), 100)

df1 <- as.tibble(t(yrep2[samp100_2, ]))

df1 <- df1 |> cbind(i = 1:3842, log_weight_obs = ds1$log_weight)|>
pivot_longer(`V1`:`V100`, names_to = "simus", values_to = "log_weight_rep")

set.seed(100)
df1 |>ggplot(aes(log_weight_rep, group = simus)) +
geom_density(alpha = 0.4, aes(color = "y_rep")) +
geom_density(data = ds1 |> mutate(simus = "V1"),alpha = 15,
aes(x = log(birthweight), col = "y")) +
scale_color_manual(name = "",values = c("y" = "red",
"y_rep" = "blue")) +
xlab("log_weight (kg)") + ggtitle("distribution of observed versus predicted birthweights")+
theme_bw(base_size = 15)+scale_x_continuous(limits = c(-1, 2))

#ggplot(ds1,aes(x=log_weight))+ggplot(ds1,aes(x=yrep2[samp100, ])) + geom_density(alpha = 0.2) + theme_bw() + xlab("log_weight (kg)") + ggtitle("distribution of observed versus predicted birthweights")
#yrep2[samp100,1 ]
#dfyrep2<-as.data.frame(yrep2[samp100, ]
#ggplot(yrep2[samp100, ],aes(x=yrep2[samp100, ])) + geom_density(alpha = 0.2) + theme_bw() + xlab("log_weight (kg)") + ggtitle("distribution of observed versus predicted birthweights")

```


## Test statistics

We can also look at some summary statistics in the PPD versus the data, again either using `bayesplot` -- the function of interest is `ppc_stat` or `ppc_stat_grouped` -- or just doing it ourselves using ggplot. 

E.g. medians by prematurity for Model 1

```{r}
ppc_stat_grouped(ds1$log_weight, yrep1, group = ds1$preterm, stat = 'median')
```

## Question 7

Use a test statistic of the proportion of births under 2.5kg. Calculate the test statistic for the data, and the posterior predictive samples for both models, and plot the comparison (one plot per model).  

```{r}

ppc_stat_grouped(ds1$log_weight, yrep2, group = ds1$preterm, stat = 'median')
ds2<-ds1|>mutate(less2.5=ifelse(birthweight<2.5,1,0))
ds2|>summarise(propt_less2.5=mean(less2.5))
```

The proportion of births' weights for both models under 2.5kg is 0.08146799.  

Model1  

```{r}
y <- ds1$log_weight
yrep1 <- extract(mod1)[["log_weight_rep"]]
df <- as.tibble(t(yrep1[samp100, ]))

df <- df |> cbind(i = 1:3842, log_weight_obs = ds1$log_weight)|>
pivot_longer(`V1`:`V100`, names_to = "simus", values_to = "log_weight_rep")

test_stat_obs <- mean(ds1$birthweight < 2.5)
test_stat_rep <- df |> group_by(simus) |>
summarize(Prop_BW = mean(exp(log_weight_rep) < 2.5))
test_stat_rep |>
ggplot(aes(x = Prop_BW)) +
geom_histogram(bins = 20, fill = "lightblue") +
geom_vline(xintercept = test_stat_obs, color = "darkred") +theme_bw() +
labs(caption = "simulated TS with light blue while real TS with dark red",
title = "Model 1 Test Statistics of PPC for proportion of births' weights < 2.5kg")
```


Model2

```{r}
test_stat_obs <- mean(ds1$birthweight < 2.5)
test_stat_rep <- df1 |> group_by(simus) |>
summarize(Prop_BW = mean(exp(log_weight_rep) < 2.5))
test_stat_rep |>
ggplot(aes(x = Prop_BW)) +
geom_histogram(bins = 20, fill = "lightblue") +
geom_vline(xintercept = test_stat_obs, color = "darkred") +theme_bw() +
labs(caption = "simulated TS with light blue while real TS with dark red",
title = "Model 2 Test Statistics of PPC for proportion of births' weights < 2.5kg")
```

# LOO

Finally let's calculate the LOO elpd for each model and compare. The first step of this is to get the point-wise log likelihood estimates from each model:

```{r}
loglik1 <- extract(mod1)[["log_lik"]]
loglik2 <- extract(mod3)[["log_lik"]]
```


And then we can use these in the `loo` function to get estimates for the elpd. Note the `save_psis = TRUE` argument saves the calculation for each simulated draw, which is needed for the LOO-PIT calculation below. 

```{r}
loo1 <- loo(loglik1, save_psis = TRUE)
loo2 <- loo(loglik2, save_psis = TRUE)
```

Look at the output:


```{r}
loo1
loo2
```

Comparing the two models tells us Model 2 is better:

```{r}
loo_compare(loo1, loo2)
```

We can also compare the LOO-PIT of each of the models to standard uniforms. The both do pretty well. 

```{r}
ppc_loo_pit_overlay(yrep = yrep1, y = y, lw = weights(loo1$psis_object))
ppc_loo_pit_overlay(yrep = yrep2, y = y, lw = weights(loo2$psis_object))
```

## Bonus question (not required)

Create your own PIT histogram "from scratch" for Model 2. 

```{r}
set.seed(1000)
y <- ds1$log_weight
yrep3 <- extract(mod3)[["log_weight_rep"]]
loglik3 <- extract(mod3)[["log_lik"]]
loo3 <- loo(loglik3, save_psis = TRUE)
loo3
ppc_loo_pit_overlay(yrep = yrep3, y = y, lw = weights(loo3$psis_object))
```


## Question 8

Based on the original dataset, choose one (or more) additional covariates to add to the linear regression model. Run the model in Stan, and compare with Model 2 above on at least 2 posterior predictive checks.

I want to add more 2 variables like `mager`- mum's age and `sex`-baby's sex to check if these factors influenced the births' weights.  



```{r}

ds2 <- ds1|> mutate(sex=ifelse(sex=="F",0,1))

# put into a list
stan_data2 <- list(N = nrow(ds2),
                  log_weight = ds2$log_weight,
                  log_gest = ds2$log_gest_c,
                  preterm=ds2$preterm,
                  mager=ds2$mager,
                  sex=ds2$sex
                  )
mod4 <- rstan::stan(data = stan_data2, 
             file = here::here("D:\\simple_weight2.stan"),
             iter = 500,
             seed=243) 

summary(mod4)$summary[c("beta[1]", "beta[2]", "beta[3]", "beta[4]","beta[5]","beta[6]","sigma"),]
```

From the summary we could see that beta[5]=0.002544497 and beta[6]=0.042022105, their values were small, so the mums' age and babies' gender had trivial impact on the births' weights.  


 PPC of both model2 and model4

```{r}
set.seed(100)
y4 <- ds2$log_weight
yrep4 <- extract(mod4)[["log_weight_rep"]]
samp100_4 <- sample(nrow(yrep4), 100)
ppc_dens_overlay(y4, yrep4[samp100_4, ])  + ggtitle("Model 4 distribution of observed versus predicted birthweights")
```

```{r}

ppc_stat_grouped(ds2$log_weight, yrep4, group = ds2$preterm, stat = 'median')

```


```{r}
samp100_4 <- sample(nrow(yrep4), 100)

df2 <- as.tibble(t(yrep4[samp100_2, ]))

df2 <- df2 |> cbind(i = 1:3842, log_weight_obs = ds2$log_weight)|>
pivot_longer(`V1`:`V100`, names_to = "simus", values_to = "log_weight_rep")
test_stat_obs <- mean(ds2$birthweight < 2.5)
test_stat_rep <- df2 |> group_by(simus) |>
summarize(Prop_BW = mean(exp(log_weight_rep) < 2.5))
test_stat_rep |>
ggplot(aes(x = Prop_BW)) +
geom_histogram(bins = 20, fill = "lightblue") +
geom_vline(xintercept = test_stat_obs, color = "darkred") +theme_bw() +
labs(caption = "simulated TS with light blue while real TS with dark red",
title = "Model 4-Test Statistics of PPC for proportion of births' weights < 2.5 kg")
```

Via checking both,the model4 did not more improvements than the model2.

